@page "/utilizadores"
@using BusinessLogic.Entities
@inject IUtilizadorService UtilizadorService
@inject NavigationManager NavigationManager

<h3>utilizadores</h3>

<table class="table">
    <thead>
    <tr>
        <th>Username</th>
        <th>Email</th>
        <th>Nome</th>
        <th>Morada</th>
        <th>Tipo de Utilizador</th>
        <th></th>
    </tr>
    </thead>
    <tbody>
    @foreach (var utilizador in UtilizadorService.Utilizadores)
    {
        <tr>
            <td>@utilizador.Username</td>
            <td>@utilizador.Email</td>
            <td>@utilizador.Nome</td>
            <td>@utilizador.Morada</td>
            <td>@utilizador.TipoUtilizador</td>
            <td>
                @*<button class="btn btn-primary"
                        @onclick="(() => ShowUtilizador(utilizador.Id))">
                    <i class="oi oi-pencil"></i>
                </button>*@
            </td>
        </tr>
    }
    </tbody>
</table>

@code {
    //utilizadores = 
    //@*@foreach (var utilizador in utilizadores)*@
    //private Utilizador[]? utilizadores;
    protected override async Task OnInitializedAsync()
    {
        await UtilizadorService.GetUtilizadores();
    }

    /*void ShowUtilizador(Guid id)
    {
        NavigationManager.NavigateTo($"utilizador/{id}");
    }*/
}

@*@page "/utilizadores"

@using System.Threading.Tasks
@using BusinessLogic.Entities
@using Newtonsoft.Json

<h3>utilizadores</h3>

@if (errorMessage != null)
{
    <p>Error: @errorMessage</p>
}
else if (utilizadors != null)
{
    <RadzenDataGrid T="Person" Data="@utilizadors" PageSize="10">
        <Columns>
            <RadzenDataGridColumn Property="Name" Title="Name" />
            <RadzenDataGridColumn Property="Age" Title="Age" />
            <RadzenDataGridColumn Property="Location" Title="Location" />
        </Columns>
    </RadzenDataGrid>
}
else
{
    <p>Loading...</p>
}

@code {
    private List<Utilizador> utilizadors;
    private string errorMessage;

    [Inject]
    private UtilizadorService UtilizadorService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var response = await UtilizadorService.GetUtilizadores();
            if (response != null)
            {
                utilizadors = response;
            }
            else
            {
                errorMessage = "Failed to retrieve data.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }
}*@
