@inject AuthenticationStateProvider AuthStateProvider
@using System.Security.Claims

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">FrontEnd</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass nav-scrollable" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Home
            </NavLink>
        </div>

        @if (authorized)
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="utilizadores">
                    <span class="oi oi-people" aria-hidden="true"></span> Utilizadores
                </NavLink>
            </div>
        }
        
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="projetos">
                <span class="oi oi-project" aria-hidden="true"></span> Projetos
            </NavLink>
        </div>
        
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="tarefas">
                <span class="oi oi-task" aria-hidden="true"></span> Tarefas
            </NavLink>
        </div>
        
    </nav>
</div>

@code {
    private bool _collapseNavMenu = true;
    bool authorized = false;

    private string? NavMenuCssClass => _collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        _collapseNavMenu = !_collapseNavMenu;
    }
    
    protected override async Task OnInitializedAsync()
    {
        string role = (await AuthStateProvider.GetAuthenticationStateAsync())
            .User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Role).Value;
        if (role.Contains("Admin"))
        {
            authorized = true;
        }
    }

}